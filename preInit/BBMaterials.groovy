import gregtech.api.GregTechAPI.PostMaterialEvent
import gregtech.api.GregTechAPI.MaterialEvent
import gregtech.api.unification.material.Material
import gregtech.api.unification.Elements
import gregtech.api.unification.material.properties.ToolProperty
import gregtech.api.unification.material.properties.BlastProperty
import gregtech.api.fluids.fluidType.FluidType;

def bromine = Elements.add(35, 44, -1, null, "Bromine", "Br", false)
def rhenium = Elements.add(75, 111, -1, null, "Rhenium", "Re", false)

event_manager.listen { MaterialEvent event ->

    new Material.Builder(20001, "methamphetamine")
        .fluid()
        .color(0xaffff6)
        .components(material('carbon') * 10, material('hydrogen') * 15, material('nitrogen') * 1)
        .flags("disable_decomposition", "generate_plate")
        .build()
  
      new Material.Builder(20002, "chloroacetone")
        .fluid()
        .color(0xffbf00)
        .components(material('carbon') * 3, material('hydrogen') * 5, material('chlorine') * 1, material('oxygen') * 1)
        .flags("disable_decomposition")
        .build()
  
      new Material.Builder(20003, "aluminium_trichloride")
        .dust().fluid()
        .color(0xd3d3d3)
        .components(material('aluminium') * 1, material('chlorine') * 3)
        .flags("disable_decomposition")
        .build()
  
      new Material.Builder(20004, "methylamine")
        .fluid(FluidType.getByName("gas"))
        .color(0xffffff)
        .components(material('carbon') * 1, material('hydrogen') * 3, material('nitrogen') * 1, material('hydrogen') * 2)
        .flags("disable_decomposition")
        .build()
  
      new Material.Builder(20005, "phenylacetone")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 9, material('hydrogen') * 10, material('oxygen') * 1)
        .flags("disable_decomposition")
        .build()
  
      new Material.Builder(20006, "lithium_aluminium_hydride")
        .dust()
        .color(0xa9a9a9)
        .components(material('lithium') * 1, material('aluminium') * 1, material('hydrogen') * 4)
        .flags("disable_decomposition")
        .build()
  
      new Material.Builder(20007, "lithium_hydride")
        .dust()
        .color(0x72a38c)
        .components(material('lithium') * 1, material('hydrogen') * 1)
        .build()
  
      new Material.Builder(20008, "lithium_chloride")
        .dust()
        .color(0xffffff)
        .components(material('lithium') * 1, material('chlorine') * 1)
        .build()

      new Material.Builder(20009, "acidified_saltwater")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20010, "treated_saltwater")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20011, "bromine_vapor")
        .fluid(FluidType.getByName("gas"))
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20012, "bromine")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .element("Bromine")
        .build()

      new Material.Builder(20013, "hydrobromic_acid")
        .fluid()
        .color(0xffffff)
        .components(material('hydrogen') * 1, material('bromine') * 1)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20014, "hydrogen chloride")
        .fluid(FluidType.getByName("gas"))
        .color(0xffffff)
        .components(material('hydrogen') * 1, material('chlorine') * 1)
        .build()

      new Material.Builder(20015, "nitrotoluene")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 7, material('hydrogen') * 7, material('nitrogen'), material('oxygen') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20016, "bromonitrotoluene") // 2-bromo-6-nitrotoluene (oil)
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 7, material('hydrogen') * 6, material('bromine'), material('nitrogen'), material('oxygen') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20017, "nickel_oxide")
        .dust()
        .color(0xffffff)
        .components(material('nickel'), material('oxygen'))
        .build()

      new Material.Builder(20018, "sulfuricacid_carbon")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20019, "rhenium")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .element("Rhenium")
        .build()

      new Material.Builder(20020, "succinic_acid")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 4, material('hydrogen') * 6, material('oxygen') * 4)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20021, "maleic_anhydride")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 4, material('hydrogen') * 2, material('oxygen') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20022, "cobalt_ii_nitrate")
        .fluid()
        .color(0xffffff)
        .components(material('cobalt') * 2, material('nitrogen') * 2, material('oxygen') * 6)
        .flags("disable_decomposition")
        .setFormula('Co(NO3)2', true)
        .build()

      new Material.Builder(20023, "cobalt_ii_oxide")
        .fluid()
        .color(0xffffff)
        .components(material('cobalt'), material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20024, "aluminium_nitrate")
        .dust()
        .color(0xffffff)
        .components(material('aluminium'), material('nitrogen') * 3, material('oxygen') * 9)
        .flags("disable_decomposition")
        .setFormula('Al(NO3)3', true)
        .build()

      new Material.Builder(20025, "alumina")
        .dust()
        .color(0xffffff)
        .components(material('aluminium') * 2, material('oxygen') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20026, "pyrrolidine")
        .dust()
        .color(0xffffff)
        .components(material('carbon') * 4, material('hydrogen') * 9, material('nitrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20027, "sodium_methoxide")
        .fluid(FluidType.getByName("gas"))
        .color(0xffffff)
        .components(material('carbon'), material('hydrogen') * 3, material('sodium'), material('oxygen'))
        .flags("disable_decomposition")
        .build()
        
      new Material.Builder(20028, "dimethylformamide")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 3, material('hydrogen') * 7, material('nitrogen'), material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20029, "dimethylformamide_dimethyl_acetal")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 5, material('hydrogen') * 13, material('nitrogen'), material('oxygen') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20030, "titanium_trichloride")
        .dust()
        .color(0xffffff)
        .components(material('titanium'), material('chlorine') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20031, "pyrrolidine_intermediate")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20032, "isopropyl")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 3, material('hydrogen') * 8, material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20033, "diisopropyl_ether")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 6, material('hydrogen') * 14, material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20034, "solvated_pyrrolidine_intermediate")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20035, "dimethylbromonitrophenylethylamine") // (N,N-dimethyl)-2-(2-bromo-6-nitrophenyl)ethenylamine
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20036, "ammonium_acetate")
        .dust()
        .color(0xffffff)
        .components(material('carbon') * 2, material('hydrogen') * 7, material('nitrogen'), material('oxygen') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20037, "ammonium_carbonate")
        .dust()
        .color(0xffffff)
        .components(material('nitrogen') * 2, material('hydrogen') * 8, material('carbon'), material('oxygen') * 3)
        .flags("disable_decomposition")
        .setFormula('(NH4)2CO3', true)
        .build()

      new Material.Builder(20038, "titanium_trichloride_ammonium_acetate_mixture")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .setFormula('(TiCl3)(C2H7NO2)')
        .build()

      new Material.Builder(20039, "organic_mixture")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20040, "centrifuged_organic_extract")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20041, "combined_organic_extract")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20042, "washed_organic_extract")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20043, "magnesium_oxide")
        .dust()
        .color(0xffffff)
        .components(material('magnesium'), material('oxygen'))
        .build()

      new Material.Builder(20044, "magnesium_sulfate")
        .dust()
        .color(0xffffff)
        .components(material('magnesium'), material('sulfur'), material('oxygen') * 4)
        .build()

      new Material.Builder(20045, "dried_organic_extract")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20046, "bromoindole_oil") // bromoindole containing oil
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .setFormula('(?)C8H6BrN', true)
        .build()

      new Material.Builder(20047, "dichloromethane")
        .fluid()
        .color(0xffffff)
        .components(material('carbon'), material('hydrogen') * 2, material('chlorine') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20048, "hexane")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 6, material('hydrogen') * 14)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20049, "column_chromatography_purifying_mixture")
        .fluid()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20050, "bromoindole") //4-bromoindole
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 8, material('hydrogen') * 6, material('bromine'), material('nitrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20051, "lysergic_acid")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 16, material('hydrogen') * 16, material('nitrogen') * 2, material('oxygen') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20052, "diethylamine")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 4, material('hydrogen') * 11, material('nitrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20053, "lsd")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 20, material('hydrogen') * 25, material('nitrogen') * 3, material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20054, "copper_oxide")
        .dust()
        .color(0xffffff)
        .components(material('copper'), material('oxygen'))
        .build()

      new Material.Builder(20055, "copper_ii_chloride")
        .dust()
        .color(0xffffff)
        .components(material('copper'), material('chlorine') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20056, "palladium_ii_chloride")
        .dust()
        .color(0xffffff)
        .components(material('palladium'), material('chlorine') * 2)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20057, "acetaldehyde")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 2, material('hydrogen') * 4, material('oxygen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20058, "paraldehyde")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 7, material('hydrogen') * 12, material('oxygen') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20059, "calcium_carbonate")
        .fluid()
        .color(0xffffff)
        .components(material('calcium'), material('carbon'), material('oxygen') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20060, "purified_paraldehyde")
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 7, material('hydrogen') * 12, material('oxygen') * 3)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20061, "ethylmethylpyridine_vapor") // 5-ethyl-2-methylpyridine vapor
        .fluid()
        .color(0xffffff)
        .components(material('carbon') * 8, material('hydrogen') * 11, material('nitrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20062, "ethylmethylpyridine") // 5-ethyl-2-methylpyridine
        .fluid(FluidType.getByName("gas"))
        .color(0xffffff)
        .components(material('carbon') * 8, material('hydrogen') * 11, material('nitrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20063, "copper_isocinchomeronate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20064, "cupric_nitrate")
        .dust()
        .color(0xffffff)
        .components(material('copper'), material('nitrogen') * 2, material('oxygen') * 6)
        .flags("disable_decomposition")
        .setFormula('Cu(NO3)2',true)
        .build()

      new Material.Builder(20065, "washed_copper_isocinchomeronate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20066, "dried_copper_isocinchomeronate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20067, "sodium_hydroxide_aqueous") // sodium hydroxide dilute aqueous solution
        .fluid()
        .color(0xffffff)
        .components(material('sodium'), material('oxygen'), material('hydrogen'))
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20068, "digested_copper_isocinchomeronate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20069, "digested_copper_isocinchomeronate_filtrate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()

      new Material.Builder(20070, "pure_copper_isocinchomeronate")
        .dust()
        .color(0xffffff)
        .flags("disable_decomposition")
        .build()
}

 event_manager.listen { PostMaterialEvent event ->
    def bismuth_bronze = material('bismuth_bronze')
    bismuth_bronze.addFlags('generate_frame')
}
